/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package aoc

import java.io.File
import java.lang.Math.abs

class App (input: File) {
    val lines: List<String>
    var counterMap = mutableMapOf<Pair<Int, Int>, Int>()

    init {
        lines = input.readLines()
    }

    fun solve(diagonal :Boolean = false) {
        lines.forEach { line ->
            val coordinates = line.split(" -> ")
            val left = coordinates[0].split(",")
            val right = coordinates[1].split(",")

            val x1 = left[0].toInt()
            val y1 = left[1].toInt()

            val x2 = right[0].toInt()
            val y2 = right[1].toInt()

            if (y1 == y2) {
                for (x in minOf(x1, x2)..maxOf(x1, x2)) {
                    val pair = Pair(x, y1)
                    counterMap[pair] = counterMap[pair]?.inc() ?: 1
                }
            }

            if (x1 == x2) {
                for (y in minOf(y1, y2)..maxOf(y1, y2)) {
                    val pair = Pair(x1, y)
                    counterMap[pair] = counterMap[pair]?.inc() ?: 1
                }
            }

            if (diagonal) {
                val diffX = abs(x1 - x2)
                val diffY = abs(y1 - y2)
                if (diffX == diffY) {
                    if (x1 > x2) {
                        var y = y1
                        for (x in x1 downTo x2) {
                            val pair = Pair(x, y)
                            counterMap[pair] = counterMap[pair]?.inc() ?: 1
                            y = if (y1 > y2) y - 1 else y + 1
                        }
                    }
                    else {
                        var y = y1
                        for (x in x1..x2) {
                            val pair = Pair(x, y)
                            counterMap[pair] = counterMap[pair]?.inc() ?: 1
                            y = if (y1 > y2) y - 1 else y + 1
                        }
                    }
                }
            }
        }
        printOverlapsCounter()
    }

    private fun printOverlapsCounter() {
        val totalOverlaps = counterMap.filter {
            it.value > 1
        }.count()
        println("Answer part 1: $totalOverlaps")
    }

    fun printCounterMap() {
        counterMap.map { item ->
            println("${item.key} -> ${item.value}")
        }
    }
}

fun main() {
    // Part 1
    val resource = "./inputs/5/"
    val day5_short = App(File("${resource}/5-short.txt"))
    day5_short.solve()

    val day5 = App(File("${resource}/5.txt"))
    day5.solve()

    // Part 2
    val day5_part2_short = App(File("${resource}/5-short.txt"))
    day5_part2_short.solve(diagonal = true)

    val day5_part2 = App(File("${resource}/5.txt"))
    day5_part2.solve(diagonal = true)
}
